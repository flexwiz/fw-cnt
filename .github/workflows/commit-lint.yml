# Validate Conventional Commits
name: Commit Message Linter

on:
  push:
    branches:
      - master
      - 'feature/*'
      - 'hotfixe/*'
  pull_request:
    branches:
      - master
      - 'feature/*'
      - 'hotfixe/*'

env:
  NODE_VERSION: '23'                # set this to the node version to use

jobs:
  validate-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Set up Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: ${{ env.NODE_VERSION }}
      #     cache: 'npm'

      # - name: Install commitlint
      #   run: npm install @commitlint/{config-conventional,cli}
      #   #run: npm install -g @commitlint/config-conventional @commitlint/cli

      # # The --from=HEAD~10 and --to=HEAD flags specify the commit range to check
      # # (you can adjust this to fit your use case, e.g., only the last commit or the entire PR).
      # - name: Run commitlint
      #   id: commitlint
      #   continue-on-error: true  # Allow failure to handle result
      #   run: npx commitlint --from=HEAD~10 --to=HEAD

      - name: Validate Conventional Commits
        uses: webiny/action-conventional-commits@v1.3.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Optional, for private repositories.
          allowed-commit-types: "feat,fix,chore,docs,style,refactor,test,perf" # Optional, set if you want a subset of commit types to be allowed.

      - name: Comment on PR if commitlint fails
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "⚠️ **Commit message check failed**\n\nPlease ensure your commit messages follow the Conventional Commits format."
            })
